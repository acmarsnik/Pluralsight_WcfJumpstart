Demo: Passing Alternate Client Credentials

Now the last thing I want to demo here security-wise, is the fact that by default, as I discussed in the slides, the identity that's going to flow to the service when using Windows Authentication is the client process identity. WCF will pick that up by default as it's dispatching the call through the proxy, and will negotiate with the server through Windows networking protocols for security to make sure the client process identity can be validated by the server. Now what if this client might be running outside the firewall, or not joined to your domain and they still need to be able to log in? Well there is a simple way to pass alternative Windows credentials as part of your client call. So to show that I'm going to drop down into the place where we're making our proxy calls, down at the bottom of our ViewModel class here. And I could go into the place where we're loading here, and what's exposed is on the client base of T BaseClass of our proxies, either code generated or manual, there is a ClientCredentials property. And the part of this that we're going to be using for Windows credentials is the Windows part of it. So we go under Windows and then we can see that there's a ClientCredential property under that, which seems a little redundant, and then underneath that finally we have the UserName, Password, and Domain that we want to log in as. Now they do allow you to use the compact notation under UserName, I could do something like this, so I can include my domain name under the username, fully qualified, or I could set that separately through the domain property of the client credential. Then I need the password, and this you will have to obtain from the user, generally by popping a dialog box to collect it and pass it directly to here, preferably not keeping it around for too long and creating a vulnerability situation in your application. For demo purposes here, I will just type in the demo password I have on the test account. So with that in place and a breakpoint in our service where the principal was being captured, first off we see, based on the code we put there before, specifically this PrincipalPermission attribute check requiring administrator, we're getting a Security. Exception failure. And if we run past that, back over here on the client-side, we get our message box popping up showing Access is denied was the error message. So we can fix that by changing this to an account the user is in, such as Users. So then I can run again, and now we can inspect that principal and see that it's still a Windows principal, it still is authenticated, but now the identity name is the test account. So it is, in fact, being authenticated based on the username/password that we specified here as Windows. ClientCredentials. 