WCF Windows Security

When it comes to using Windows authentication with WCF, what happens is that the client is going to pass a Windows identity to the service representing the client's identity, and the service has to validate that and decide whether to let the call in. That Windows identity can be based on one of two things. By default, it's going to pick up the process identity, so every process on Windows has an identity associated with it. Normally it's the logged in user if it's an end-user kind of application like a client app, but it could be a service identity such as the account that IIS is running under, or whatever identity a Windows service is configured to run under. Now if you don't want it to use the process identity, for example if the user is using a laptop that's maybe their personal laptop and not part of the domain, then you can use alternate credentials that you set through the client proxy, and we'll see what that look like in the demo, but there's basically an API exposed on the proxy base class called client credentials that lets you go and set the credentials that you want the proxy to pass, explicitly. Once those credentials come in on the server-side, it's going to validate those using Windows network security protocols, and it's either going to use NTLM, which is what it uses in a work group configuration, or it's going to use Kerberos, which is what it uses for a domain configuration in domain accounts. Once that identity's been validated it establishes a principal, as I talked about in the authorization section, and you can use that to authorize the user. By default, what it's going to use when you specify a role, is Windows Groups. So you'll need to specify a group like administrators, or managers, or whatever groups you get set up by your IT admins, and you can check for those in the code by specifying it as a role name. Now you're not locked into using Windows Groups, you can still use Windows Identity for the authentication step, and then configure WCF to use a different source, such as using the role provider, which goes hand in hand with the membership provider, which again was developed by the ASP. NET Team, but works great with WCF as well. 