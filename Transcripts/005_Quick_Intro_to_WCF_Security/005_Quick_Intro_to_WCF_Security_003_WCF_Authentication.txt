WCF Authentication

Now when it comes to authenticating the caller in WCF, you have a lot of options. You can use a number of different kinds of client credentials to try to establish who is the caller and are they a valid caller. The first that we'll be focusing on in this module is Windows. I would assume that anyone watching this course that's a. NET developer has the general concept of Windows authentication, but we'll talk about specifically what it means to WCF later in this module. Another kind of credential you can use is what's called username credentials, which really means a username and a password. Whereas Windows authentication happens outside of the messages that flow from your client to your service, username authentication is passed as part of the message in the headers of the SOAP message. Another option is to use a client-side certificate. This is fairly rare for individual users, but for organizations where you have possibly a partner company that's making calls into a service that you expose, using a certificate that represents that organizational identity can be a good way to authenticate those calls. Finally, you could use federated tokens, something like a SAML token, or Security Access Markup Language token, that's part of a bigger system for single sign on. When these credentials come in you need to validate them in some way, and there are several ways to go about validating credentials. First off, with Windows it's kind of built-in to the operating system and the networking protocols. If you're using something like username and passwords, then you can use the membership provider. The membership provider was developed by the ASP. NET Team for building and securing websites, but it works very well with WCF as well, and it puts a layer of abstraction between your code that validates credentials and where those credentials are stored, such as in a database. And if you're doing federated security, you can go out to a Security Token Service, or STS, actually make a separate call to a separate service, get it to validate the credentials, and then it gives you back a token that represents the secure session. And then your service just has to validate that that token comes from a known Security Token Service. There's certainly also a number of custom hooks, both on the credential side and the way you go about validating those credentials to do custom security, but generally you should stick to the built-in forms of security as much as possible. 