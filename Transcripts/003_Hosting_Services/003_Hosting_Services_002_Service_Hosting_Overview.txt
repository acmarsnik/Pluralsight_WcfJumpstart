Service Hosting Overview

So what's hosting all about? Well, basically your services need somewhere to live; they need a host process in which to run, and that host process needs to provide a host, and the host is responsible for setting up the service, listening for incoming message, creating the instances of the service class that's going to answer those messages, and dispatching the calls to the appropriate service method within that instance. The host is also in charge of deciding exactly how calls are answered, so it's the configuration of the host process that defines what protocols you're going to be answering calls on, and the configuration of those individual endpoints, their behaviors, and bindings. Now when it comes to hosting options, you've got a couple of options available. First off there's the concept of self-hosting. And self-hosting refers to putting your WCF service host in any. NET process. This could be a console app, a Windows service; it could be a client-side construct like a WPF app, or a Windows Forms app, but in most cases you're talking about a Windows service for deployment to a server, or a console application for debugging purposes, which is what we're going to use in the demos. To set this up in that host, you construct a ServiceHost class, that ServiceHost class will wrap a given service class and basically be the broker that accepts messages and dispatches them into your service. The other primary option you have is an IIS host, or web host. Basically, this means for deployment purposes you're going to deploy this to an IIS server. For development purposes you can use IIS Express, and you define your project based on an ASP. NET web application project. By default, IIS can only handle HTTP traffic, so you're going to have to limit yourself to bindings that are HTTP-based. The reasons you would want to use IIS is that IIS is a very robust infrastructure for answering network calls. It's been around a long time, it's been through many versions, and it has a lot of features for scalability, availability, reliability, security, and so on, and a lot of configurability through the tools associated with IIS. So it basically gives you a very robust, pre-built hosting environment for your code to run in. Now IIS itself, is only limited to HTTP, but WCF has an extension for IIS called Windows Process Activation Service, which is just called WAS for short. WAS rolls off the tongue a little better than WPAS, but WAS allows you to enable other protocols such as NETTCP for sockets, MSMQ, and named pipes. The last option to mention and actually the first one we'll start with in demos is to use your WCF Service Library itself. This is okay for a quick smoke test, or initial test of your service, to make sure that it runs and your configuration's right and you can sometimes go back to using this for a debug scenario where you want to isolate things. But even for debugging and development, you're generally going to want to use a self host, such as a console, that you can step debug down into the hosting code and see exactly what's going on when something's going wrong. Or you might want to use an IIS host, because as an ASP. NET web application project, it will auto start within your solution. In this module I'll show you how to set up all of these, and as we move beyond this module I'll stick to the self- hosting. So let's dive into a demo that walks through the configuration of a service, and then using the WCF Service Library, evolving to a self host, and evolving to an IIS host. 