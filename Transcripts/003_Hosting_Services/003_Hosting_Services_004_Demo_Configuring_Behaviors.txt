Demo: Configuring Behaviors

So now that we have our service endpoints defined, you're generally going to want to set up a few service behaviors as well. So I'm going to add a behaviors section to my service model here. Underneath behaviors you can see there are serviceBehaviors and endpointBehaviors. We're just going to focus on serviceBehaviors here. Underneath that I can add a behavior. If I define a behavior without a name it's going to apply to all the services within this host. And inside that behavior definition there's different behaviors I can invoke. The first one I'm going to look at is serviceDebug. ServiceDebug behavior allows you to set a property called includeExceptionDetailInFaults, and I'm going to set it to true. It's false by default and what that means is WCF normally does not expose details of exceptions across the service boundary, which is good from a security perspective. You don't want to be returning stack traces to any arbitrary caller who's trying to hack your service. But for debugging purposes, when a call from a client fails you may want to know why. So if you turn this IncludeExceptionDetailInFaults to true, it'll pass back all the detailed exception information to the client. Another one you're generally going to want to turn on so that you can code generate proxies on the client-side is the service metadata behavior, and what we're going to set on this is httpGetEnabled equals true. So what this does is it says that you can come in with an HTTP get request to the base address of a service and retrieve its metadata. That metadata is going to come back in the form of WSDL, W-S-D-L, and it's going to be metadata that describes the service contract, the data contracts, and the exposed endpoints and configuration of that service. So where is that base address defined? Well, we haven't done that yet. Speaking of addresses, I notice I have a typo up here, localhost on my TCP address, let's fix that now. So the base address is defined as part of the service definition up above. We can define a host section, under host is baseAddresses, and in the baseAddresses I can add a baseAddress, and I'll use http://localhost:2112. The baseAddress does not have to be the same as any of the ones down below, but if it is we can use a relative addressing scheme, and I can just say Zza here for this address and it will be concatenated onto the end of the base address. But since TCP is on a different protocol and different port, it can be a fully qualified address like this. Now the combination of a base address for the service, and service metadata turned on through this behavior, with the httpGetEnabled turned to true so that we can pull it down through an HTTP get for the WSDL, now we have the minimum we need to be able to code generate client proxies. Next up, let's talk about binding modifications. 