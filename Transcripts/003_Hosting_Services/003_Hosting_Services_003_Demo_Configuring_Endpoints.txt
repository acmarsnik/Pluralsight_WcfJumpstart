Demo: Configuring Endpoints

So the first option we have, in terms of hosting, is to use the WCF Service Library that our service is living within. Now to do that we need to dive into configuration first to get our service configured for hosting. And this configuration I'm going to show here is common with when you do self-hosting and IIS hosting. WCF configuration is defined in config files, either App. config or Web. config files. And so I'm going to drop in here and define a system. serviceModel section. All of your WCF configuration will go in this section. And the first thing we want to define is the service hosting itself, which belongs in a services collection, because you can host more than one service in a given host. So then we'll define a service element, and it's important that you build before you get to this step, so I'm going to build right now, and then you need to specify the name property. Now the reason for the build is so that we get this IntelliSense here, Visual Studio is able to find all the service implementation classes within your solution and present those as options here for hosting. So I'll just hit Tab to accept that ZzaService, and close out my service element. Now inside my service element I need to define my endpoint. And as we covered in the first module, an endpoint is composed of an address, a binding, and a contract. So I'll define an endpoint here, and let's focus on the address first. For this first endpoint I'm going to use HTTP. So the first part of the address is the protocol that you're using. And the next part of the address is the root server address, so I'm going to use localhost:2112 here. Now generally you'll use localhost because clients can still get to this service based on whatever addressing scheme gets them to the server that this is running on. And for local debugging purposes, localhost is perfectly sufficient. The 2112 there is just an arbitrary port number, it'll have to be different than port 80, which is the default for HTTP because we're not inside IIS here. We're going to be running in the WCF service host executable. The last part of the address is optional and it's an arbitrary URI for the service, so I'll just call this Zza. So those are the three parts of the address, the protocol, the root server address, and an arbitrary URI to differentiate different services on the same host. Next up is the binding. The binding that you pick is going to depend on the protocol you intend to use, as well as more advanced features that you may opt into. We're just going to use the basic HTTP binding here, the simplest of the HTTP bindings. And then we need a contract, and the contract we get IntelliSense on as well. I can just hit Z, here, to find our Zza namespace and that's our IZzaService service contract that we implemented in the last module. So I can clean that up and we can see our address, binding, and contract for this endpoint is defined. I could define another endpoint here, such as on the TCP protocol. So this one you can see my protocol is net. tcp, I'm on a different port because it's a different protocol, but otherwise my address is very similar. I use the netTcpBinding, and I'm exposing the same service contract over that endpoint. So what this allows is that external callers, outside the firewall, could come in over HTTP to this service, but internal clients on our local area network could come in via sockets, which is going to be a little bit faster. So that's how you define endpoints for your services to start exposing them. Next up we'll look at behaviors and bindings. 