WCF Overview

First off let's talk about what WCF is all about. Again, it breaks out to Windows Communication Foundation as a full name, but we'll just be calling it WCF. Basically, it's a platform for building distributed, service-oriented applications, clients and services that you want to connect together across a network boundary, that could be a local area network or over the open internet, and WCF itself gives you the platform support for defining services, defining hosts for those services, and for defining clients that are capable of connecting to those services. Now WCF is built with interoperability in mind, so it does not presume that both sides of the communication are. NET. It's built on a set of open standard protocols that are implemented on other platforms including Enterprise Java. But in this course we'll just be focusing on. NET to. NET. Another thing to know about WCF is that it's mostly about SOAP messaging. SOAP is an XML-based protocol for how to format information at a wire-level. It doesn't make any presumptions about what transport protocol, such as HTTP or TCP, it's going to go over, but it tells you how to structure your information in requests and response messages. So at the end of the day WCF is a messaging system, but the way it's designed is to abstract you at a. NET level from those wire-level protocol details. It lets you focus on the business operations you're trying to expose for remote indication, and not focus so much on the plumbing. And basically what it does is makes it so that as a. NET developer and an object-oriented programmer, it's relatively easy to build these distributed, service-oriented applications using open standard protocols that can integrate with other platforms and do advanced patterns, but you're able to focus on just creating objects, exposing methods, and calling those methods. But by using WCF you get a system for distributed communications that's secure, and it's secure by default, and has a lot of flexibility on how you secure your calls. It's scalable, it's able to be deployed to many servers, and have many clients, and scale to whatever degree you need it to. It allows you to write clients and services that are robust, meaning they can be highly available, reliable, and so on. And finally, WCF is nothing if not flexible. There are lots and lots of configuration options to everything you do, and there's lots of extensibility points, so it's very easy, for example, to define a service that maybe you initially expose only over NETTCP or sockets to clients within your enterprise, but then through a simple configuration change you can additionally expose it over HTTP outside the firewall with no code-level changes. 