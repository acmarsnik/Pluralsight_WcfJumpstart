Demo: Hello WCF Client

So if we next wanted to add a simple. NET client that's able to call this service instead of using that WcfTestClient, how would we go about doing that? Well, I'm going to go ahead and Add a New Project. And I could pick a Console, Windows Forms, WPF, just about any kind of. NET client. I'm just going to use WPF here for simplicity. We'll call this HelloWCFClient, and click OK. Now you don't have to know anything about WPF to follow along here, I think anybody can get the idea of slapping a button on a form and adding a click handler for that button. So we want to be able to call our WCF service form this Button_Click handler. To do that we're going to need some client-side code that's capable of calling that service. And the quick way to get there with WCF is through code generation of the client-side proxy. To do that we can right-click on the project, say Add, Service Reference, and because that project, HelloWCF, is in our solution and has that automatic hosting that we saw in the last demo, again just click the Discover button here. You can see it found our service; it's going to put it in a namespace called ServiceReference1, and I can just click OK here. It's doing some code generation into the client project, adding some references, and when it's done we're ready to start using that service. So I can just drop into the client-side code here and new up a proxy. I get that from the Service1 namespace, Service1Client class that it code generated, which is the proxy class. I can use the default constructor on this, and it's going to use some configuration that was also added in the code generation process. You can see some client-side service model, WCF related configuration generated here that we'll talk through later. Once I have that proxy I can start making calls against it as a local object in the process of the client that's capable of dispatching the calls to the service. So I call proxy. GetData, pass in my 42, and that's going to return me a string. So I'll capture that in a local variable, and then we'll use a MessageBox to pop it up on the screen. Now I can go and set my client project as the startup project, and because of that option that we showed before in the WCF Service Library, under WCF service Options, Start WCF Service Host when debugging another project in the same solution, I'm able to start debugging here on the client project, and down in the service tray we can see those two little gear icons, it did start up our service host, and has that up and running for us. So we can click our Button, and lo and behold we get our response back, You entered: 42, and we pop that in our message box. So just by doing an Add, Service Reference, either typing in an address and saying Go, or saying Discover if it's in the same solution, we can code generate the code needed to call our service and we're off and running. 