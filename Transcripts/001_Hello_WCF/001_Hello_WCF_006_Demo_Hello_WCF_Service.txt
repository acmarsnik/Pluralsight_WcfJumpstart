Demo: Hello WCF Service

In this demo I want to walk you through creating the equivalent of a Hello World WCF service, simply using the built-in project template for WCF services. I'll show you quickly what's there and how you can test what is generated to get some basic connectivity going. Then we'll see how to quickly create a. NET client for that service through the code generation of WCF. So to get started you go and create a new project. And the project type you're going to want to select down here in the WCF category is the WCF Service Library. I'll give this a name of HelloWCF, and click OK. If you look in Solution Explorer, you can see what gets generated here is an IService1, which you can see on the screen is an interface that's marked as a ServiceContract. In that same file there's also a DataContract definition, and then there is the Service1 implementation class that derives from the IService1 ServiceContract. Now I'm not going to go into the implementation details of all of it, but you can see here that the service has a GetData method that takes in an integer and returns a string. And that's what we're going to be calling in this demo. The other thing that's in the project is this App. config file, and if you go look in there you'll see a bunch of scary looking configuration that we'll unravel for you throughout the course here. But basically it's configuration that makes it so the service is ready to be hosted inside of this project. Now if you go look at the project properties for this project, you can see here it is a Class Library project. Normally, you can't start and run a Class Library project in Visual Studio. However this special project type has this WCF Options tab to it, and the first option that you see is selected by default, says Start WCF Service Host when debugging another project in the same solution. It's already a verbose option there, but it should say or when debugging this project, because you can actually F5, start debugging on this Class Library, as we'll see in a moment. Think of it as the equivalent, if you've been exposed, if you go into the Debug tab and say Start external program, that's one way you can debug a Class Library is by pointing to a host that uses that Class Library. That's implicitly being done here in the WCF service library pointing to an executable called WcfServiceHostSvcHost. exe. In addition, you can see the project type wires up an extra command line argument /client: WcfTestClient. exe. So starting debugging on this project is actually going to start both the WcfSvcHost. exe, and load this library into it, it's also going to start the WcfTestClient. exe to be able to make calls to that service. So let's just go ahead and do that. We'll start up debugging, and down in the bottom right you can see a toast pop-up that we can click on, and that is that WfcSvcHost. exe starting up and hosting our Service1 service. We can see it says the status is Started, and it's got some addressing information we'll dive into later. We can close that. It stays running down here in the system tray, this little two gears icon is the running service host. The other window that pops up is that WcfTestClient. exe, and you can see what it actually does is it goes and pulls down metadata about the service from the running service itself, and through that metadata it's able to dynamically generate some proxy code that's capable of calling that service. We can see our GetData method here listed in the tree, and if we double-click on that, we can see it wants an input value. Remember there was an integer input to the GetData method, we can type in a value there, and we can click on the Invoke button down here. Click on Invoke. It's going to warn us about sending information over the wire, just check the box don't warn me about that in the future and click OK. And down here at the bottom, you can see the results already came back. That string result where it concatenates You entered, and the value that came in is a parameter, and returns that as a string. So just that quick, you basically have a Hello World service just by creating a project using the default WCF Service Library project template. Next let's see how we can write our own. NET client very easily for this through some code generation. 