Summary

Okay, so in this module you got walked through the process of defining the service implementation. You saw the real starting point at a code level is to define your Service Contracts, and those Service Contracts are. NET interfaces that are annotated with the ServiceContract attribute at the interface level, and the OperationContract attribute at each method level. And those attributes really define the external visibility as a service of what's exposed at the service boundary. Just be aware there are additional properties I did not show available on those attributes to drive more advanced aspects of how your service is exposed, such as changing the name of the service, or the namespace it lives in, and other aspects of how the operations are called. Part of defining a ServiceContract is to define DataContracts, because those DataContracts are the parameters to the methods and the return types. Those data contracts can be defined explicitly using the DataContract and DataMember attributes, DataContract attribute at the type level, DataMember attribute at the property level. They can be implicit Data Contracts, which means just a public type with public properties, or they can be primitives. Next up you define your service implementation class, and it can be just a. NET class that implements the interface, but you'll often use the ServiceBehavior attribute to drive aspects of its behavior when it's called. One of those we looked at is the one that drives service instancing, the InstanceContextMode property of the ServiceBehavior that lets you specify an enumeration to say whether it's sessionful, PerCall, or a singleton model. As I talked about in the demo, I recommend you favor the PerCall instancing mode. It makes your service more scalable, and in particular if you're using transactions, you'll generally want to stick to the PerCall model because things get complicated with sessions and singletons. And again, you do that by setting the InstanceContextMode property on the ServiceBehavior. So now we have a service implementation to work with, in the next module we'll move on to getting that hosted and up and running so we can start calling it. 