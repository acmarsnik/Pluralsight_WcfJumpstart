WCF Client Overview

As we talked about briefly in the first module, the first thing you need on the client-side is a client proxy. And a proxy, again, is an object in memory on the client-side that exposes the same interface, or API, that the service does. Your consuming code will make calls against that proxy, and the proxy will dispatch those calls as messages to the service. We also saw briefly in the first module that you can code generate your proxies with Visual Studio with the add service reference feature. To do this the service has to be up and running, and it's got to expose metadata about itself through one of two means that WCF understands. The first is Web Services Description Language, or WSDL, and the second is called WS-MetadataExchange, which is a SOAP-based protocol for exchanging the metadata with the client. Basically, Visual Studio is capable of reading down either one of these and using it to code generate the proxy code. You can also hand-code proxies. Proxies are not rocket science, and you'll see that in a later demo in this module. And hand-coding the proxies actually gives you some advantages in advanced scenarios. You can encapsulate repeating patterns of usage, things like setting credentials, or using some of the extensibility features of WCF on the client-side. Once you have your proxy in place then you can start making calls through the instance methods of that proxy. When you make a call through a proxy it opens a connection to the service, if one is not already open, it dispatches that call through SOAP messages that the server-side will then turn back into method calls against the service on the server, and then it'll get a response message back that represents the return value of the method, even if it's void there will still be a response message by default, and that will complete the method execution on the client-side whether done synchronously or asynchronously. Now I should mention that WCF does support other calling patterns, such as one-way messaging, but we won't be getting into that in this course. 